import os

def configure(conf):
    conf.env.CDS_MIXED_SIGNAL = True

    conf.load('cadence_ius')
    conf.load('cadence_mixed_signal')

    conf.env['CDS_LIBS']['brick_test'] = '../../cdslib/'
    conf.env.CDS_LIB_INCLUDES = [
        '$TSMC_DIR/oa/cds.lib',
    ]

    conf.env['NCELAB_OPTIONS'].extend([
        '-amsconnrules', 'ConnRules_12V_full_fast', 'ConnRules_12V_full_fast',
        '-libverbose',
        '-modelpath', os.environ['TSMC_DIR']+'/oa/models/spectre/toplevel.scs(tt_lib)',
    ])

def build(bld):
    bld ( features = 'cds_write_libs' )

    bld (
        features = 'cds_config',
        name = 'create_inverter_config',
        libs = ['brick_test','tsmcN65'],
        cellview = 'brick_test.inverter:schematic',
        #update_outputs = True
    )

    bld (
        features = 'cds_mixed_signal',
        cellview = 'worklib.inverter:brick_config',
        netlist = True,
        compile = True,
    )

    bld (
        name = 'compile_top',
        source = bld.convert_string_paths(
            [
                '../../source/verilog/package.sv',
                '../../source/verilog/tb.sv',
                '../../source/verilog/top.sv',
                '../../source/verilog-ams/inverter_array.vams',
                os.environ['BRICK_DIR']+'/source/verilog-ams/ConnRules12.vams'
            ]),
        features = 'cds_compile_hdl',
        verilog_search_paths = bld.convert_string_paths(['../../source/verilog'])
    )
    bld.add_group()
    bld (
        toplevel = 'worklib.tb',
        features = 'cds_elab',
        always = True
    )

def run(bld):
    bld (
        features = 'ncsim',
        toplevel = 'worklib.tb',
        stop_time = '100n',
    )

from waflib.Build import BuildContext
class one(BuildContext):
    cmd = 'run'
    fun = 'run'


#ELAB_OPTIONS'].extend([                                        
# 95             '-amsfastspice',
# 96             '-modelpath', os.environ['PROJECT_ROOT']+'/env/include_all_models.scs',
# 97             #'-libverbose',
# 98             '-iereport',
# 99             'cds_globals',
#100         ])
#101 
#102         conf.env['NCSIM_OPTIONS'].extend([
#103             '-analogControl', '../amsControl.scs',
#104         ])
#105 



