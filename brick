#!/usr/bin/python

import ConfigParser
import getopt
import sys
import os
import logging
from brickContainer import brickContainer

def init_logger():
    'Initializes a logging object with loglevel INFO'
    global logger
    logger= logging.getLogger('brICk')
    FORMAT = "%(asctime)s %(levelname)s %(message)s"
    logging.basicConfig(format=FORMAT)
    logger.setLevel(logging.INFO)

def parse_config_file(filename):
    try:
        global config
        config= ConfigParser.ConfigParser()
        config.read(filename)
        logger.info("Read configuration file "+os.getcwd()+args[0]+".")
    except IndexError, err:
        print "Please name give a configuration file as argument."
        sys.exit(2)

# ----------
#    main
# ----------
if __name__ == "__main__":
    # create logger
    init_logger()

    # parse args and options
    try:
        opts,args = getopt.getopt(sys.argv[1:],"h",["loglevel=","mode=","testcase=","simulator="])
    except getopt.GetoptError, err:
        print str(err)
        sys.exit(2)

    # parse options
    try:
        loglevel = 'INFO'
        for opt in opts:
            # set the loglevel
            if opt[0] == '--loglevel':
                loglevel = opt[1]

        logger.setLevel(getattr(logging,loglevel))

    except ValueError:
        pass

    # read the configuration file
    parse_config_file(args[0])

    # debug output configuration file
    #for section in config.sections():
    #    print section
    #    for name,value in config.items(section):
    #        print name,"=",value

    # initialize brick object
    import __builtin__
    __builtin__.brick = brickContainer(args[0],config)
    __builtin__.logger = logger

    # register pre-run hooks
    import pre_general
    import pre_modules
    import pre_cadence
    #brick.print_pre_run_hooks()

    # call pre-run hooks
    if not brick.run_pre_hooks():
        print "Stopped because of error in pre_hooks"
        sys.exit(2)

    # prepare tasks
    brick.prepare_tasks()
    # run tasks
    brick.run_tasks()
    # postprocess tasks
    brick.postprocess_tasks()

